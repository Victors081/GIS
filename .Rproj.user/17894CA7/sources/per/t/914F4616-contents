


"ESTA RUTINA CONTIENE FUNCIONES QUE PERMITEN LIMPIAR Y MANTENER LO MÁS
ORGANIZADO POSIBLE LA INFORMACIÓN SOBRE LATITUD Y LONGITUD P A FIN DE
VISUALIZAR FACILMENTE LA INFORMACIÓN"

# SETUP ####

if (!require("pacman")) install.packages("pacman")


pacman::p_load(KeyboardSimulator)


if(.Platform$OS.type == "windows") withAutoprint({
  memory.size()
  memory.size(TRUE)
  memory.limit()
})

memory.limit(size=56000)



# LOAD SOME AWESOME PACKAGES  ####


pacman::p_load(haven, foreign, stringr, readxl,readr, dplyr, leaflet,sf,
               ggplot2,ggspatial,tmap,magick,ggmap, maps, mapdata,rayshader,cartography,
               SpatialPosition,sp)




# THE DATA ####



# CARGAMOS LAS CAPAS DE LSO BARRIOS, COMUNAS, CORREGIMIENTOS, LA ZONA DE EXPANSION Y LAS VIAS 
# DE SANTIAGO DE CALI QUE USAREMOS PARA VISUALIZAR EL MAPA DE ESTA CIUDAD CON NUESTROS DATOS


COMUNAS <- read_sf("CAPAS/COMUNAS/Comunas.shp")

BARRIOS <- read_sf("CAPAS/BARRIOS/Barrios.shp", options = "ENCODING=WINDOWS-1252")

BARRIOS <- st_as_sf(BARRIOS, crs = 4326)

CORREGIMIENTOS <- read_sf("CAPAS/VEREDAS/Corregimientos.shp", options = "ENCODING=WINDOWS-1252")

ZONA_EXP <- read_sf("CAPAS/ZONA DE EXPANSION/Division_suelo_expansion.shp", options = "ENCODING=WINDOWS-1252")

VIAS <- read_sf("CAPAS/VIAS/Jerarquizacion_vial.shp", options = "ENCODING=WINDOWS-1252")



# DATOS

load("DATOS/BASE.RData")


# RECUPERAMOS LA BASE DE DATOS FINAL QUE ORGANIZAMOS EN EL ARCHIVO CaliBrando.R
# ESTE ARCHIVO CONTIENE LA BASE DE DATOS LIMPIA Y LA ORIGINAL.




# PREPROCESING



point <- PANEL %>% select(barrio, id_barrio, 
                          comunabarrio ,
                          dir_estandar ,dir_longitud,dir_latitud, promedioingresos,
                          satisfaccioningreso, saludmental,ingreso, direccion,centroide)



point2 <- point %>% select(dir_longitud:dir_latitud)



# JOIN ALL FACETS


names(BARRIOS)

names(CORREGIMIENTOS)

names(ZONA_EXP)

names(VIAS)

names(COMUNAS)


BARRIOS2 <- BARRIOS %>% select(barrio, geometry,id_barrio) %>% rename(name = barrio, id = id_barrio)


CORREGIMIENTOS[CORREGIMIENTOS$id_correg == 63,2] <- "Corregimiento La Paz"

CORREGIMIENTOS[CORREGIMIENTOS$id_correg == 56,2] <- "Corregimiento Los Andes"


CORREGIMIENTOS2 <- CORREGIMIENTOS %>% select(corregimie, geometry,id_correg) %>% rename(name = corregimie, id = id_correg)


ZONA_EXP2 <- ZONA_EXP %>% select(nombre, geometry,id_sector) %>% rename(name = nombre, id= id_sector)


COMUNAS2 <- COMUNAS %>% select(nombre, geometry) %>% rename(name = nombre)


CALI <- rbind(BARRIOS2, CORREGIMIENTOS2, ZONA_EXP2)




## COMPLETAMOS LA INFORMACIÓN DE LOS NOMBRES DE LOS BARRIOS Y LAS COMUNAS


pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(point2), 
                                     function(i) {st_point(as.numeric(point2[i, ]))}), list("crs" = 4326)))



pnts_trans <- st_transform(pnts_sf, 2163) # apply transformation to pnts sf

tt1_trans <- st_transform(CALI, 2163)      # apply transformation to polygons sf

# intersect and extract name
point2$barrio2 <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2, 
                       function(col) { 
                         tt1_trans[which(col), ]$name
                       })


point2$barrio_id <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2, 
                        function(col) { 
                          tt1_trans[which(col), ]$id
                        })



tt2_trans <- st_transform(COMUNAS2, 2163)      # apply transformation to polygons sf

# intersect and extract name
point2$comuna <- apply(st_intersects(tt2_trans, pnts_trans, sparse = FALSE), 2, 
                       function(col) { 
                         tt2_trans[which(col), ]$name
                       })


rm(BARRIOS2, CORREGIMIENTOS2, ZONA_EXP2, COMUNAS2)



#sum(point3$barrio2=="character(0)")


#point2$barrio2 <- unlist(point2$barrio2)



point3 <- cbind(point2, point[,names(point) != c("dir_longitud","dir_latitud")])


#plot(CALI)



point3[which(point3$barrio2=="character(0)"),3] <- c("Ciudad del Campo",
                                                     "Ciudad del Campo",
                                                     "Ciudadela Floralia",
                                                     "Ciudad del Campo",
                                                     "Poblado Campestre")






z <- point3 %>% filter(centroide==1) %>% group_by(barrio2)%>%summarise(n())%>%rename(total=`n()`)


z$barrio2 <- unlist(z$barrio2)

sum(z$total)

CALI2 <- left_join(CALI, z, by = c("name" = "barrio2"))





#CALI2 <- CALI2[CALI2$name %in% unique(CALI2$name),]

#sum(CALI2$total)

CALI2[is.na(CALI2$total),"total"] <- 0

#CALI2[c(48,26),]<- 0

CALI2 <- CALI2[CALI2$total != 0,]




sum(CALI2$total)











spdf <- as_Spatial(CALI2)

sum(spdf$total)


samples <- list()

for (i in 1:nrow(spdf)) {
  psub <- spdf[i,]
  ns <- spdf[i,]$total
  psamp <- try( sp::spsample(psub, n = ns, type = "random", 
                             iter = 10) )
  samples[[i]] <- sp::SpatialPointsDataFrame(psamp, 
                                             data.frame(name = rep(psub$name,length(psamp))))
}


samples <- do.call("rbind", samples)

#proj4string(samples) <- proj4string(spdf)

#proj4string(samples) <-CRS("+proj=utm +zone=10 +datum=WGS84")

samples@coords

sort(spdf$name)




plot(spdf)

points(samples, pch=20) 





df <- data.frame(samples@coords,samples@data)


df <- left_join(df, CALI2, by = c("name" = "name")) %>% select(-geometry,-total)


df <- st_as_sf(df, coords = c("x", "y"), crs = "EPSG:6249")

df <- st_transform(df, crs= "EPSG:4326")


df <- df %>%
  dplyr::mutate(lon = sf::st_coordinates(.)[,1],
                lat = sf::st_coordinates(.)[,2])



x <- point3 %>% filter(centroide==1 & barrio2 != "Ciudad del Campo" & barrio2 != "Poblado Campestre") #%>% select(barrio) 


x$barrio2 <- unlist(x$barrio2)

x$barrio_id <- unlist(x$barrio_id)


x[which(x$comuna=="character(0)"),]

is.na(x$comuna) <- lengths(x$comuna) == 0

x$comuna <- unlist(x$comuna)



Y <-  point3 %>% filter(centroide==0 | barrio2 == "Ciudad del Campo" | barrio2 == "Poblado Campestre")



Y$barrio2 <- unlist(Y$barrio2)


sum(lengths(Y$barrio_id) == 0)


is.na(Y$barrio_id) <- lengths(Y$barrio_id) == 0



Y$barrio_id <- unlist(Y$barrio_id)


sum(lengths(Y$comuna) == 0)

is.na(Y$comuna) <- lengths(Y$comuna) == 0

Y$comuna <- unlist(Y$comuna)




x <- x[order(x$barrio2),]

df <- df[order(df$name),]

x$dir_longitud <- df$lon

x$dir_latitud <- df$lat


w <- rbind(x,Y)

### AQUI QUEDAMOS


# JUST TO SEE

ggplot()+geom_sf(data = CALI)+geom_sf(data = VIAS, fill = "red")+geom_point(data = w, 
                                         aes(x = dir_longitud,  
                                             y = dir_latitud))+
  coord_sf(xlim=c(-76.58,-76.4),ylim=c(3.33,3.5),crs = st_crs(4326))







# VISUALIZE




levels(w$promedioingresos) <- 1:7

w2 <- w[w$promedioingresos %in% c(as.character(1:5)),]

w2$promedioingresos <- as.numeric(w2$promedioingresos)










d <- ggplot() +
  geom_sf(data = CALI, fill = "transparent", colour = "white")+
  geom_sf(data = VIAS, fill = "transparent", colour = "#DCD5CE")+
  coord_sf(xlim=c(-76.58,-76.4),ylim=c(3.33,3.5),crs = st_crs(4326))+
  geom_point(data = w2, 
             aes(x = dir_longitud,  
                 y = dir_latitud, 
                 colour = as.character(promedioingresos),
                 size=10,
                 fill="black"))+
  scale_color_manual(labels=c("Menor a 1",
                              "Entre 1 y 2",
                              "Entre 2 y 4",
                              "Entre 4 y 8",
                              "Mayor a 8"),
                     values=c('#bd0026','#fd8d3c','#FFC300','#0CC11F','#136B1C'))+
  theme_void(base_family = "Iosevka", base_size = 48) +
  labs(x = NULL, y = NULL,
       title = "Santiago de Cali: Ingreso promedio por barrio",
       subtitle = "1 dot = 1 people",
       caption = "Map by @Victors081 | Data Sources: CaliBRANDO") +
  guides(colour = guide_legend(override.aes = list(size = 12),title="Promedio SMMLV"),
         fill = "none",
         size = "none") +
  theme(legend.position = c(0.8, 0.8), legend.direction = "vertical",
        plot.background = element_rect(fill = "#212121", color = NA), 
        panel.background = element_rect(fill = "#212121", color = NA),
        legend.background = element_rect(fill = "#212121", color = NA),
        legend.key = element_rect(fill = "#212121", colour = NA),
        plot.margin = margin(1, 1, 1, 1, "cm"),
        text =  element_text(color = "white"),
        title =  element_text(color = "white"),
        plot.caption = element_text(size = 28),
        plot.title = element_text(size = 32),
        plot.subtitle = element_text(size = 32),
        legend.text = element_text(size = 29),
        legend.title = element_text(size = 32)
  )




align_legend <- function(p, hjust = 0.5)
{
  # extract legend
  g <- cowplot::plot_to_gtable(p)
  grobs <- g$grobs
  legend_index <- which(sapply(grobs, function(x) x$name) == "guide-box")
  legend <- grobs[[legend_index]]
  
  # extract guides table
  guides_index <- which(sapply(legend$grobs, function(x) x$name) == "layout")
  
  # there can be multiple guides within one legend box  
  for (gi in guides_index) {
    guides <- legend$grobs[[gi]]
    
    # add extra column for spacing
    # guides$width[5] is the extra spacing from the end of the legend text
    # to the end of the legend title. If we instead distribute it by `hjust:(1-hjust)` on
    # both sides, we get an aligned legend
    spacing <- guides$width[5]
    guides <- gtable::gtable_add_cols(guides, hjust*spacing, 1)
    guides$widths[6] <- (1-hjust)*spacing
    title_index <- guides$layout$name == "title"
    guides$layout$l[title_index] <- 2
    
    # reconstruct guides and write back
    legend$grobs[[gi]] <- guides
  }
  
  # reconstruct legend and write back
  g$grobs[[legend_index]] <- legend
  g
}

library(cowplot)

d <- ggdraw(align_legend(d))


ggsave("GRAPHS/Santiago de Cali2.png", plot = d, dpi = 320, width = 85, height = 70, units = "cm")






rm(list = ls())


keybd.press('Ctrl+Shift+F10')









### codigo de aqui en adelante es un borrador y no debe correrse





# SAMPLE


library(ggplot2)

polygon =
  # The syntax for creating a polygon with sf is a little strange.
  # It has to be a list of matrices and the first point has to be 
  # repeated as the last point (2, 1).
  list(
    matrix(
      c(2, 1, 3, 3, 2, 5, 3, 7, 2, 9, 1, 7, 0, 5, 1, 3, 2, 1),
      ncol=2, byrow=T
    )
  ) 

# Create an sf polygon
polygon = sf::st_polygon(polygon)
# Sample 50 random points within the polygon
points = sf::st_sample(polygon, size=50)


CALI %>% group_by(geometry) %>% sf::st_polygon() 



rpnt <- list()
for(i in 1:length(CALI)){
  pp <- p[p$ID_2==i,]
  rpnt[[i]] <- sp::spsample(pp, n=pp$AREA/20, "random") #modify it to what you want
  plot(rpnt[[i]], pch=i, col=(i), add=T)
}




points <- st_sample(CALI, size = rep(5, nrow(CALI)), type = "random")




plot(st_geometry(CALI))
plot(points, pch = 20, add= TRUE)















# POR BARRIOS


ING <- point2 %>% group_by(region) %>% summarise(mean = mean(ingreso))

ING$clasificacion <- ifelse(ING$mean < 828116,1,
                            ifelse(ING$mean >= 828116 & ING$mean < 1656232, 2,
                                   ifelse(ING$mean >= 1656232 & ING$mean < 3312464,3,
                                          ifelse(ING$mean >= 3312464 & ING$mean < 6624928,4,
                                                 ifelse(ING$mean >= 6624928,5,NA)))))


setdiff(CALI$name, ING$region)


CALI$ing <- ifelse(CALI$name %in% ING$region, ING$mean, mean(ING$mean))

CALI2$ing <- ifelse(CALI2$name %in% ING$region, ING$clasificacion, mean(ING$clasificacion))

round(CALI2$ing)

d2 <- ggplot() +
  geom_sf(data = CALI, fill = "transparent", colour = "white")+
  geom_sf(data = VIAS, fill = "transparent", colour = "#DCD5CE")+
  coord_sf(xlim=c(-76.58,-76.4),ylim=c(3.33,3.5),crs = st_crs(4326))+
  geom_sf(data = CALI2, 
          aes(fill=factor(round(ing))))+
  scale_fill_manual(labels=c("Menor a 1",
                             "Entre 1 y 2",
                             "Entre 2 y 4",
                             "Entre 4 y 8",
                             "Mayor a 8"),
                    values=c('#bd0026','#fd8d3c','#FFC300','#0CC11F','#136B1C'))+
  theme_void(base_family = "Iosevka", base_size = 48) +
  labs(x = NULL, y = NULL,
       title = "Santiago de Cali: Ingreso promedio por barrio",
       subtitle = "1 dot = 1 people",
       caption = "Map by @Victors081 | Data Sources: CaliBRANDO") +
  guides(fill = guide_legend(override.aes = list(size = 12),title="Promedio SMMLV"),
         size = "none") +
  theme(legend.position = c(0.8, 0.8), legend.direction = "vertical",
        plot.background = element_rect(fill = "#212121", color = NA), 
        panel.background = element_rect(fill = "#212121", color = NA),
        legend.background = element_rect(fill = "#212121", color = NA),
        legend.key = element_rect(fill = "#212121", colour = NA),
        plot.margin = margin(1, 1, 1, 1, "cm"),
        text =  element_text(color = "white"),
        title =  element_text(color = "white"),
        plot.caption = element_text(size = 28),
        plot.title = element_text(size = 32),
        plot.subtitle = element_text(size = 32),
        legend.text = element_text(size = 29),
        legend.title = element_text(size = 32)
  )



ggsave("cali_points2.png", plot = d2, dpi = 320, width = 85, height = 70, units = "cm")







#


par(mar = c(0, 0, 0, 0))
# set margins
opar <- par(mar = c(0,0,1.2,1))
# plot municipalities (only the backgroung color is plotted)
plot(st_geometry(CALI2), col = NA, border = "black", bg = "grey50")


choroLayer(x = CALI2, var = "ing", method = "geom", nclass=5, 
           col = carto.pal(pal1 = "turquoise.pal", n1 = 5), border = "grey80", 
           lwd = 0.5, legend.pos = "bottomleftextra", add = TRUE,
           legend.title.txt = "Population Density\n(people per km2)") 


# plot isopleth map
smoothLayer(
  x = CALI2, 
  var = 'ing',
  typefct = "exponential",
  span = 100,
  beta = 10,
  nclass = 5,
  col = carto.pal(pal1 = 'red.pal', n1 = 5),
  border = "black",
  lwd = 0.1, 
  mask = CALI2, 
  legend.title.txt = "Income",
  legend.pos = "topright", 
  add=TRUE
)
# annotation on the map
text(x = 650000, y = 1200000, cex = 0.6, adj = 0, font = 3,  labels = 
       "Distance function:\n- type = exponential\n- beta = 2\n- span = 20 km")
# layout
layoutLayer(title = "Coffee Production Distribution in Antioquia",
            sources = "Sources: CaliBRANDO, 2019",
            author = "Victor Sarmiento",
            frame = FALSE, north = FALSE, tabtitle = TRUE, theme = "green.pal")
# north arrow
north(pos = "topleft")



# CLEAR MIND :)

rm(list = ls())

dev.off()

keybd.press('Ctrl+Shift+F10')























# TO SEE  



register_google(key = "AIzaSyBUlhYQahMYIDg7cUenbnjrl-F8pzWZoOY")



Calixd <- geocode("Cali, Colombia", zoom = 13)










# POR ORDENAR







sort(names(data))


geo <- data %>% select(barrio, id_barrio, latitudbarrio, longitudbarrio, 
                       comunabarrio, latitudcom ,longitudcom ,
                       dir_estandar ,dir_longitud,dir_latitud, promedioingresos,
                       satisfaccioningreso, saludmental,ingreso)


cali <- read_sf("Zonas_cali/barrios_wgs84_4.shp")

head(crime)


# plot a ggmap basemap
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite",legend="none")
plot(map)

qmplot()

scatterplot_murder <- qmplot(x=dir_longitud,y=dir_latitud,data=geo,legend="none",color=I("darkred"))

plot(scatterplot_murder)


densityplot_murder <- qmplot(x=dir_longitud, y=dir_latitud, 
                             data = geo, 
                             geom = "blank",
                             maptype = "toner-background", 
                             darken = .7, 
                             legend = "topright") + stat_density_2d(aes(fill = ..level..), 
                                                                    geom = "polygon", 
                                                                    alpha = .5,
                                                                    color = NA) + scale_fill_gradient2(low = "blue", 
                                                                                                       mid = "green", 
                                                                                                       high = "red")



plot(densityplot_murder)







library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)

pacman::p_load(ggplot2, ggmap, maps, mapdata,rgdal)

#remove.packages(rlang)

#install.packages("rlang")





# INGRESO #####

table(geo$promedioingresos)


levels(geo$promedioingresos) <- 1:7

geo <- geo[geo$promedioingresos %in% c(as.character(1:5)),]

geo$promedioingresos <- as.numeric(geo$promedioingresos)


cali2 <- read_sf("CAPAS/COMUNAS/Comunas.shp")

cali3 <- read_sf("CAPAS/BARRIOS/Barrios.shp", options = "ENCODING=WINDOWS-1252")

cali4 <- read_sf("CAPAS/VEREDAS/Corregimientos.shp", options = "ENCODING=WINDOWS-1252")


cali3$barrio

ggplot(cali)+geom_sf()


ggplot()+geom_sf(data = cali2)+geom_sf(data = cali3)+geom_sf(data=cali4)

#stat_density2d(aes(fill = ..level..,x=promedioingresos, y=satisfaccioningreso), geom = "polygon",data = geo))


map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite",legend="none")
plot(map)




# remove any rows with missing data
crime <- crime[complete.cases(crime), ]

# look at the structure of the crime data
str(crime)




ggmap::register_google(key = "AIzaSyBUlhYQahMYIDg7cUenbnjrl-F8pzWZoOY")

# load a basemap
basemap <- get_map(location = "Houston, TX", zoom = 9)



ggmap(basemap) + 
  stat_density2d(aes(fill = ..level..), alpha = .5, 
                 h = .02, n = 300,
                 geom = "polygon", data = crime) + 
  scale_fill_viridis() + 
  theme(legend.position = 'none')

#+geom_sf(data = cali4)

ggplot(cali3)+geom_sf()


png("test.png", units="in", width=10, height=8, res=400)


ggplot(cali) +
  geom_sf(fill="#EAF2F8")+
  geom_point(data = geo, 
             aes(x = dir_longitud,  
                 y = dir_latitud, 
                 colour = as.character(promedioingresos),
                 size=12,
                 fill="black"))+
  scale_color_manual(labels=c("< 1 SMMLV",
                              "1 - 2 SMMLV",
                              "2 - 4 SMMLV",
                              "4 - 8 SMMLV",
                              "> 8 SMMLV"),
                     values=c('#bd0026','#fd8d3c','#FFC300','#0CC11F','#136B1C'))+
  theme(axis.line = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank())+
  guides(size="none",
         colour=guide_legend(title = "Ingreso promedio",title.position = "top"),
         fill="none")+
  annotation_north_arrow(location = "tl", which_north = "true",
                         style = north_arrow_fancy_orienteering)+
  annotation_scale(location = "bl")




dev.off()



# ESCALA DE ROJOS c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')



# SATISFACCION CON EL INGRESO

library(Hmisc)
library(tidyverse)



describe(geo$satisfaccioningreso)

table(geo$satisfaccioningreso)

geo$satisfecho <- ifelse(geo$satisfaccioningreso <= 5, "NO", "SI")

geo$satisfecho <- factor(geo$satisfecho,ordered = T,levels = c("SI","NO"))

describe(geo$satisfecho)


x <- geo %>% select(dir_longitud, 
                    dir_latitud,
                    promedioingresos,
                    satisfecho)%>%drop_na()

png("test1.png", units="in", width=10, height=8, res=400)

ggplot(cali) +
  geom_sf(fill="#EAF2F8")+
  geom_point(data = x, 
             aes(x = dir_longitud,  
                 y = dir_latitud, 
                 colour = as.character(promedioingresos),
                 size=12,
                 fill="black",
                 shape=satisfecho))+
  scale_color_manual(labels=c("Menos de 1 SMMLV",
                              "Mas de 1 SMMLV y menos de 2 SMMLV",
                              "Mas de 2 SMMLV y menos de 4 SMMLV",
                              "Mas de 4 SMMLV y menos de 8 SMMLV",
                              "Mas de 8 SMMLV"),
                     values=c('#bd0026','#fd8d3c','#FFC300','#0CC11F','#136B1C'),na.translate=FALSE)+
  theme(axis.line = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank())+
  guides(size="none",
         colour=guide_legend(title = "Ingreso promedio",title.position = "top"),
         fill="none",
         shape=guide_legend(title = "¿Está satisfecho con su ingreso?"))+
  annotation_north_arrow(location = "tl", which_north = "true",
                         style = north_arrow_fancy_orienteering)+
  annotation_scale(location = "bl")




dev.off()



# FORMA 2

png("test1.1.png", units="in", width=10, height=8, res=400)

ggplot(cali) +
  geom_sf(fill="#EAF2F8")+
  geom_point(data = x, 
             aes(x = dir_longitud,  
                 y = dir_latitud,size=8,
                 fill="black",
                 shape=satisfecho,
                 colour=satisfecho))+scale_shape_manual(values = c(16, 17))+
  theme(axis.line = element_blank(),
        panel.background = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank())+
  guides(size="none",
         fill="none",
         colour=guide_legend(title = "¿Está satisfecho con su ingreso?"),
         shape="none")+
  annotation_north_arrow(location = "tl", which_north = "true",
                         style = north_arrow_fancy_orienteering)+
  annotation_scale(location = "bl")

dev.off()


# SALUD MENTAL

describe(geo$saludmental)

png("test2.png", units="in", width=10, height=8, res=400)

ggplot(cali) +
  geom_sf(fill="#EAF2F8")+
  geom_point(data = x, 
             aes(x = dir_longitud,  
                 y = dir_latitud,size=8,
                 fill="black",
                 shape=satisfecho,
                 colour=satisfecho))+scale_shape_manual(values = c(16, 17))+scale_color_manual(c("#EC7E16",))
theme(axis.line = element_blank(),
      panel.background = element_blank(),
      axis.ticks = element_blank(),
      axis.text = element_blank(),
      axis.title = element_blank())+
  guides(size="none",
         fill="none",
         colour=guide_legend(title = "¿Está satisfecho con su ingreso?"),
         shape="none")+
  annotation_north_arrow(location = "tl", which_north = "true",
                         style = north_arrow_fancy_orienteering)+
  annotation_scale(location = "bl")

dev.off()
























#+ 
scale_color_viridis_c(labels=c("< 1 SMMLV",
                               "Entre 1 y 2 SMMLV",
                               "Entre 2 y 4 SMMLV",
                               "Entre 4 y 8 SMMLV",
                               "> 8 SMMLV"))
scale_colour_gradient(name = 'Rango de ingresos', 
                      limits=range(geo$promedioingresos), 
                      low="#FCB9B2", high="#B23A48") 
theme_classic()+scale_color_manual(labels=c("Menos de 1 SMMLV",
                                            "Mas de 1 SMMLV y menos de 2 SMMLV",
                                            "Mas de 2 SMMLV y menos de 4 SMMLV",
                                            "Mas de 4 SMMLV y menos de 8 SMMLV",
                                            "Mas de 8 SMMLV"),
                                   values=sort(c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')))+
  annotation_scale(location = "br", width_hint = 0.5) +
  annotation_north_arrow(location = "tl", which_north = "true", 
                         pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),style = north_arrow_fancy_orienteering)+
  theme(axis.ticks.x=element_blank(),
        axis.ticks.y=element_blank(),
        axis.line.x = element_blank(),
        axis.line.y=element_blank(),
        axis.text.x = element_blank(),
        axis.text.y=element_blank(),
        axis.title = element_blank(),
        legend.position = "left",
        legend.title = element_blank(),
        plot.title = element_text(hjust = 5))+ 
  guides(colour=guide_legend(reverse = TRUE))+labs(title="Santiago de Cali: Promedio de ingresos 2019")



map_cali































levels(geo$promedioingresos) <- 1:7





table(geo$saludmental)

table(geo$satisfaccioningreso)

#GRAFICOS SELECCIONADOS



geo <- geo[geo$promedioingresos %in% c(as.character(1:5)),]

geo$promedioingresos <- as.numeric(geo$promedioingresos)


#fill=NA


map_cali <- ggplot(cali) +geom_sf()+
  geom_point(data = geo, aes(x = dir_longitud,  y = dir_latitud, colour = promedioingresos)) + 
  scale_color_viridis_c(labels=c("< 1 SMMLV",
                                 "Entre 1 y 2 SMMLV",
                                 "Entre 2 y 4 SMMLV",
                                 "Entre 4 y 8 SMMLV",
                                 "> 8 SMMLV"))+
  #scale_colour_gradient(name = 'Rango de ingresos', 
  #limits=range(geo$promedioingresos), 
  #low="#FCB9B2", high="#B23A48") + 
  theme_classic()+#scale_color_manual(labels=c("Menos de 1 SMMLV",
  # "Mas de 1 SMMLV y menos de 2 SMMLV",
  #"Mas de 2 SMMLV y menos de 4 SMMLV",
  #"Mas de 4 SMMLV y menos de 8 SMMLV",
  #"Mas de 8 SMMLV"),
  #values=sort(c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')))+
  annotation_scale(location = "br", width_hint = 0.5) +
  # annotation_north_arrow(location = "tl", which_north = "true", 
  #pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),#style = north_arrow_fancy_orienteering)+
  theme(axis.ticks.x=element_blank(),
        axis.ticks.y=element_blank(),
        axis.line.x = element_blank(),
        axis.line.y=element_blank(),
        axis.text.x = element_blank(),
        axis.text.y=element_blank(),
        axis.title = element_blank(),
        legend.position = "left",
        legend.title = element_blank(),
        plot.title = element_text(hjust = 5))+ 
  guides(colour=guide_legend(reverse = TRUE))+labs(title="Santiago de Cali: Promedio de ingresos 2019")



map_cali



plot_gg(map_cali, windowsize=c(1300,800), 
        scale = 300, width =8,height = 5,multicore = TRUE, 
        zoom = 0.4, phi = 35, theta = 30)


render_snapshot(title_text = "Santiago de Cali, Promedio de Ingresos",
                title_color = "white", title_bar_color = "darkgreen",
                vignette = TRUE,
                title_font = "Helvetica", gravity = "North")


render_snapshot(vignette = TRUE)

#options(repos = c(
# tylermorganwall = 'https://tylermorganwall.r-universe.dev',
#CRAN = 'https://cloud.r-project.org'))

# Install some packages
#install.packages('rayshader')






















































tm_shape(cali) +
  tm_fill() +
  tm_borders() + 
  tm_compass(type = "8star", position = c("left", "top")) + tm_style("classic")+ 
  tm_scale_bar(position=c("right", "bottom"))




tm_scale_bar(breaks = c(0, 20), text.size = .2,position = c("left", "top"))

tm_layout(title = "Santiago de Cali")




ggplot(cali)+
  annotation_map_tile("stamenbw",zoom=13,zoomin = 0)  +geom_sf(fill=NA)+
  geom_point(data = geo[geo$promedioingresos %in% c(as.character(1:5)),], aes(x = dir_longitud, 
                                                                              y = dir_latitud, 
                                                                              colour = promedioingresos))  +
  theme_classic()+scale_color_manual(labels=c("Menos de 1 SMMLV",
                                              "Mas de 1 SMMLV y menos de 2 SMMLV",
                                              "Mas de 2 SMMLV y menos de 4 SMMLV",
                                              "Mas de 4 SMMLV y menos de 8 SMMLV",
                                              "Mas de 8 SMMLV"),
                                     values=sort(c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')))+                              # Change fill & border color
  scale_fill_manual(values = c(rep("black",5)))+
  annotation_scale(location = "br", width_hint = 0.5) +
  annotation_north_arrow(location = "br", which_north = "true", 
                         pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
                         style = north_arrow_fancy_orienteering)+theme(axis.ticks.x=element_blank(),
                                                                       axis.ticks.y=element_blank(),
                                                                       axis.line.x = element_blank(),
                                                                       axis.line.y=element_blank(),
                                                                       axis.text.x = element_blank(),
                                                                       axis.text.y=element_blank(),
                                                                       axis.title = element_blank())+ guides(colour=guide_legend(title="Categoria"))



sum(is.na(geo$promedioingresos))

sum(is.na(geo$dir_longitud))

sum(is.na(geo$longitudbarrio))


'#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'
sort(c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026'))



data$ingreso



ggplot(cali) +geom_sf()+
  geom_point(data = geo[geo$promedioingresos %in% c(as.character(1:5)),], aes(x = dir_longitud, 
                                                                              y = dir_latitud, 
                                                                              colour = promedioingresos), size = 4) + 
  theme_classic()+scale_color_manual(labels=c("Menos de 1 SMMLV",
                                              "Mas de 1 SMMLV y menos de 2 SMMLV",
                                              "Mas de 2 SMMLV y menos de 4 SMMLV",
                                              "Mas de 4 SMMLV y menos de 8 SMMLV",
                                              "Mas de 8 SMMLV"),
                                     values=c('#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'))+
  theme(axis.ticks.x=element_blank(),
        axis.ticks.y=element_blank(),
        axis.line.x = element_blank(),
        axis.line.y=element_blank(),
        axis.text.x = element_blank(),
        axis.text.y=element_blank(),
        axis.title = element_blank())+ guides(colour=guide_legend(title="Categoria"))


summary(geo$satisfaccioningreso)





boston <- st_read("../data/boston.geojson")
proj4 <- st_crs(boston)$proj4string

student_points <- student_info %>% 
  st_as_sf(coords = c('lng', 'lat'), crs = proj4)

tm_shape(boston) +
  tm_polygons('#f0f0f0f0', border.alpha = 0.2) +
  tm_shape(student_points_rastered) +
  tm_raster(alpha = 0.7, title = '# of students')





#EXPERIMENTANDO ANDO

pacman::p_load(mapdeck)


library(mapdeck)
set_token(Sys.getenv("MAPBOX"))
crash_data = read.csv("https://git.io/geocompr-mapdeck")
crash_data = na.omit(crash_data)
ms = mapdeck_style("dark")
mapdeck(style = ms, pitch = 45, location = c(0, 52), zoom = 4) %>%
  add_grid(data = crash_data, lat = "lat", lon = "lng", cell_size = 1000,
           elevation_scale = 50, layer_id = "grid_layer",
           colour_range = viridisLite::plasma(6))



mapdeck() %>%
  add_scatterplot(
    data = capitals
  )


mapdeck() %>%
  add_grid(
    data = capitals
  )

mapdeck(style = mapdeck_style("dark")) %>%
  add_path(
    data = roads
  )



library(mapdeck)

set_token( read.dcf("~/Documents/.googleAPI", fields = "MAPBOX"))
df <- read.csv(paste0(
  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/'
  , '3d-heatmap/heatmap-data.csv'
))

df <- df[!is.na(df$lng), ]

mapdeck(token = key, style = mapdeck_style("dark"), pitch = 45) %>%
  add_hexagon(
    data = df[ df$lat > 54.5, ]
    , lat = "lat"
    , lon = "lng"
    , layer_id = "hex_layer"
    , elevation_scale = 100
    , colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
  )


roads

names(geo)

df

cali2 <- geo %>% select(dir_longitud,dir_latitud,ingreso)

cali2 <- cali2[!is.na(cali2$dir_longitud) & !is.na(cali2$dir_latitud),]





mapdeck(token = key, style = mapdeck_style("dark"), pitch = 45) %>%
  add_grid(
    data = cali2
    , lat = "dir_latitud"
    , lon = "dir_longitud"
    , layer_id = "grid_layer"
    , elevation_scale = 5
    , colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
  )




mapdeck( token = key, style = mapdeck_style('dark'), pitch = 45) %>%
  add_screengrid(
    data = cali2
    , lat = "dir_latitud"
    , lon = "dir_longitud"
    , weight = "ingreso"
    , cell_size = 5
    , opacity = 0.3
    , colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("viridis")[70:256,])
  )




mapdeck( token = key ) %>%
  add_scatterplot(
    data = cali2
    , lat = "dir_latitud"
    , lon = "dir_longitud", layer_id = "scatter_layer"
    , palette = "plasma"
  )

data1= capitals

mapdeck(token = key, style = mapdeck_style("dark")
        , zoom = 10) %>%
  add_path(
    data = cali
    , stroke_colour = "RIGHT_LOC"
    , layer_id = "path_layer"
  )


key <- 'pk.eyJ1IjoidmljdG9yczA4MSIsImEiOiJjbDEwNXQzczYweHo2M2lvM2VpbmoxM3FyIn0.NYvozDt1mB-kuoHfJpl82Q'    ## put your own token here
mapdeck(token = key)















#RAYSHARDER

library(ggplot2)
pacman::p_load(rayshader )

ggdiamonds = ggplot(diamonds) +
  stat_density_2d(aes(x = x, y = depth, fill = stat(nlevel)), 
                  geom = "polygon", n = 200, bins = 50,contour = TRUE) +
  facet_wrap(clarity~.) +
  scale_fill_viridis_c(option = "A")

par(mfrow = c(1, 2))

plot_gg(ggdiamonds, width = 5, height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5, height = 5, multicore = TRUE, scale = 250, 
        zoom = 0.7, theta = 10, phi = 30, windowsize = c(800, 800))
Sys.sleep(0.2)
render_snapshot(clear = TRUE)












mtplot = ggplot(mtcars) + 
  geom_point(aes(x = mpg, y = disp, color = cyl)) + 
  scale_color_continuous(limits = c(0, 8))

par(mfrow = c(1, 2))
plot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)

plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800), 
        zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
Sys.sleep(0.2)
render_snapshot(clear = TRUE)










map_bg = ggplot(map_data, aes(long, lat, group=group, fill = Population)) +
  geom_polygon() + # Shape
  scale_fill_gradient(limits=range(map_data$Population), 
                      low="#FFF3B0", high="#E09F3E") + 
  layer(geom="path", stat="identity", position="identity", 
        mapping=aes(x=long, y=lat, group=group, 
                    color=I('#FFFFFF'))) + 
  theme(legend.position = "none", 
        axis.line=element_blank(), 
        axis.text.x=element_blank(), axis.title.x=element_blank(),
        axis.text.y=element_blank(), axis.title.y=element_blank(),
        axis.ticks=element_blank(), 
        panel.background = element_blank()) # Clean Everything
map_bg
# Save as PNG
xlim = ggplot_build(map_bg)$layout$panel_scales_x[[1]]$range$range
ylim = ggplot_build(map_bg)$layout$panel_scales_y[[1]]$range$range
ggsave('map_bg1.png', width = diff(xlim)*100, height = diff(ylim)*100, units = "cm")











levels(geo$promedioingresos) <- 1:7

str(geo)

geo <- geo[geo$promedioingresos %in% c(as.character(1:5)),]

geo$promedioingresos <- as.numeric(geo$promedioingresos)


#fill=NA


map_cali <- ggplot(cali) +geom_sf()+
  geom_point(data = geo, aes(x = dir_longitud,  y = dir_latitud, colour = promedioingresos)) + 
  scale_color_viridis_c(labels=c("< 1 SMMLV",
                                 "Entre 1 y 2 SMMLV",
                                 "Entre 2 y 4 SMMLV",
                                 "Entre 4 y 8 SMMLV",
                                 "> 8 SMMLV"))+
  #scale_colour_gradient(name = 'Rango de ingresos', 
  #limits=range(geo$promedioingresos), 
  #low="#FCB9B2", high="#B23A48") + 
  theme_classic()+#scale_color_manual(labels=c("Menos de 1 SMMLV",
  # "Mas de 1 SMMLV y menos de 2 SMMLV",
  #"Mas de 2 SMMLV y menos de 4 SMMLV",
  #"Mas de 4 SMMLV y menos de 8 SMMLV",
  #"Mas de 8 SMMLV"),
  #values=sort(c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')))+
  #annotation_scale(location = "br", width_hint = 0.5) +
  # annotation_north_arrow(location = "tl", which_north = "true", 
  #pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),#style = north_arrow_fancy_orienteering)+
  theme(axis.ticks.x=element_blank(),
        axis.ticks.y=element_blank(),
        axis.line.x = element_blank(),
        axis.line.y=element_blank(),
        axis.text.x = element_blank(),
        axis.text.y=element_blank(),
        axis.title = element_blank(),
        legend.position = "bottom",
        legend.box = "horizontal")+ 
  guides(colour=guide_legend(title="Promedio de ingresos", reverse = TRUE))



map_cali




#xlim = ggplot_build(map_cali)$layout$panel_scales_x[[1]]$range$range
#ylim = ggplot_build(map_cali)$layout$panel_scales_y[[1]]$range$range



#, width = 6, windowsize=c(1400,866),
#zoom = 0.55, theta = -10, phi = 25



plot_gg(map_cali, windowsize=c(1400,866), 
        scale = 300, width =5,height = 5,multicore = TRUE)


render_camera(zoom=0.5,theta=-30,phi=30)
render_snapshot(clear = TRUE)


save_3dprint(filename_map, clear=TRUE)


















plot_gg(map_cali, scale = 300, width = 10 ,height=10)


plot_gg(map_cali, multicore = TRUE, width = diff(xlim) ,height=diff(ylim)*10, fov = 70, scale = 300)

# BORRADOR



library(tidyverse)
#library(rworldmap)
library(sf)
# Data 

pacman::p_load(spData,spDataLarge)

library(spData)      
library(spDataLarge)

# Get map data
worldMap <- map_data("world")

# Select only some countries and add values
europe <- 
  data.frame("country"=c("Austria",
                         "Belgium", 
                         "Germany",
                         "Spain", 
                         "Finland", 
                         "France", 
                         "Greece", 
                         "Ireland", 
                         "Italy", 
                         "Netherlands", 
                         "Portugal",
                         "Bulgaria","Croatia","Cyprus", "Czech Republic","Denmark","Estonia", "Hungary",
                         "Latvia", "Lithuania","Luxembourg","Malta", "Poland", "Romania","Slovakia",
                         "Slovenia","Sweden","UK", "Switzerland",
                         "Ukraine", "Turkey", "Macedonia", "Norway", "Slovakia", "Serbia", "Montenegro",
                         "Moldova", "Kosovo", "Georgia", "Bosnia and Herzegovina", "Belarus", 
                         "Armenia", "Albania", "Russia"),
             "Growth"=c(1.0, 0.5, 0.7, 5.2, 5.9, 2.1, 
                        1.4, 0.7, 5.9, 1.5, 2.2, rep(NA, 33)))

# Merge data and keep only Europe map data

data("world")

worldMap <- world

worldMap$value <- europe$Growth[match(worldMap$region,europe$country)]

centres <- 
  worldMap %>%
  filter()
st_centroid()

worldMap <- worldMap %>%
  filter(name_long %in% europe$country) 

# Plot it 

centroids <- 
  centres$geom %>% 
  purrr::map(.,.f = function(x){data.frame(long = x[1],lat = x[2])}) %>% 
  bind_rows %>% data.frame(name_long = centres$name_long) %>% 
  left_join(europe,by = c("name_long" = "country"))


barwidth = 1
barheight = 0.75

ggplot()+ 
  geom_sf(data = worldMap, color = "black",fill = "lightgrey",
          colour = "white", size = 0.1)+
  coord_sf(xlim = c(-13, 35),  ylim = c(32, 71)) + 
  geom_rect(data = centroids,
            aes(xmin = long - barwidth,
                xmax = long + barwidth,
                ymin = lat,
                ymax = lat + Growth*barheight)) + 
  geom_text(data = centroids %>% filter(!is.na(Growth)),
            aes(x = long,
                y = lat + 0.5*Growth*0.75,
                label = paste0(Growth," %")),
            size = 2) + 
  ggsave(file = "test.pdf",
         width = 10,
         height = 10)




rm(centres,europe,world,worldMap)

